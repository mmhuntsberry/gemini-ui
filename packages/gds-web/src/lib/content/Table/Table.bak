import { html, LitElement, unsafeCSS } from "lit";
import { property, customElement, state } from "lit/decorators.js";
import { ifDefined } from "lit/directives/if-defined.js";
import {
  createTable,
  getCoreRowModel,
  getSortedRowModel,
  Table,
  ColumnDef,
  SortingState,
  Updater,
  getFilteredRowModel,
} from "@tanstack/table-core";
import {
  Colors,
  Mode,
  TableHeaderSize,
  TableRowSize,
  TextAlign,
} from "@nielsen-media/gds-types";

import "../../actions/AdjustmentBar/AdjustmentBar";
import "./TableLabel";

import styles from "./index.scss?inline";

export interface GDSTable<T> {
  columns: ColumnDef<T, any>[];
  data: T[];
  background?: Colors;
  headerSize?: TableHeaderSize;
  mode?: Mode;
  rowSize?: TableRowSize;
  searchOnly?: boolean;
  sortable?: boolean;
  tableTitle?: string;
  textAlignment?: TextAlign;
  withHeader?: boolean;
}

@customElement("gds-table")
export class GDSTable<T> extends LitElement {
  static override styles = unsafeCSS(styles);

  @property() columns: ColumnDef<T, any>[] = [];
  @property() data: T[] = [];
  @property() background?: Colors = "default";
  @property() headerSize?: TableHeaderSize = "tiny";
  @property() mode?: Mode = "light";
  @property() rowSize?: TableRowSize = "regular";
  @property({ reflect: true }) searchOnly?: boolean = false;
  @property({ reflect: true }) sortable?: boolean = false;
  @property() tableTitle?: string = "";
  @property() textAlignment?: TextAlign = "left";
  @property({ reflect: true }) withHeader?: boolean = true;

  // @ts-expect-error We expect an error here because table state is not intialized.
  @state() table: Table<T>;

  @state() sorting: SortingState = [];
  @state() globalFilter = "";

  override firstUpdated(): void {
    if (!this.table) {
      this.createTable();
    }

    this.table.setOptions((prev) => ({
      ...prev,
      state: {
        ...prev.state,
        ...this.table.initialState, // Everything breaks if we remove this line.
        sorting: this.sorting,
      },

      data: this.data ? [...this.data] : [],
    }));
  }

  /**
   * Updates sorting state.
   *
   * @param updater
   * @returns void
   */
  private setSorting = (updater: Updater<SortingState>) => {
    if (!this.sortable) return;
    if (updater instanceof Function) {
      this.sorting = updater(this.sorting);
    } else {
      this.sorting = updater;
    }

    // Update table with new sorting value
    this.table.setOptions((prev) => ({
      ...prev,
      state: {
        ...prev.state,
        sorting: this.sorting,
      },
    }));
  };

  createTable() {
    this.table = createTable({
      state: {
        sorting: this.sorting,
      },
      columns: this.columns ?? [],
      data: [],
      enableFilters: true,
      enableGlobalFilter: true,
      enableSorting: this.sortable,
      renderFallbackValue: null,
      globalFilterFn: (row, columnId, filterValue: string) => {
        /**
         * There an open issue - https://github.com/TanStack/table/issues/4280
         *
         * This causes us to have to convert any column
         * that may have a number type as it value to break the
         * table when filtering.
         *
         * Here we have to coerse numbers to strings to
         * hack around the error.
         */
        const search = filterValue.toLowerCase();

        let value = row.getValue(columnId) as string;
        if (typeof value === "number") value = String(value);

        return value?.toLowerCase().includes(search);
      },
      getCoreRowModel: getCoreRowModel(),
      getSortedRowModel: getSortedRowModel(),
      getFilteredRowModel: getFilteredRowModel(),
      onGlobalFilterChange: () => this.globalFilter,
      onSortingChange: this.setSorting,
      onStateChange: () => null,
    });
  }

  override updated() {
    if (this.sortable) {
      this.table.setOptions((prev) => ({
        ...prev,
        state: {
          ...prev.state,
        },
        enableSorting: this.sortable,
      }));
    }
  }

  override render() {
    if (!this.table) return;
    return html` <div class="table-title-container">
        <h3 size=${this.headerSize} class="table-title">${this.tableTitle}</h3>
        ${this.searchOnly
          ? html`<gds-adjustment-bar
              .searchOnly=${this.searchOnly}
              .config=${{
                search: {
                  actions: {
                    handleSearchTerm: (e: MouseEvent) => {
                      const input = e.target as HTMLInputElement;

                      /**
                       * We need to set both globalFilter properties
                       * else filter event doesn't fire properly.
                       */
                      this.globalFilter = input.value;
                      this.table.getState().globalFilter = input.value;
                    },
                    handleClear: () => {
                      /**
                       * We need to set both globalFilter properties
                       * else filter doesn't event clear filter value.
                       */
                      this.globalFilter = "";
                      this.table.getState().globalFilter = "";
                    },
                  },
                },
              }}
            ></gds-adjustment-bar>`
          : html`<p>Sorry</p>`}
      </div>

      <div
        class="gds-table"
        mode=${ifDefined(this.mode ? this.mode : undefined)}
      >
        <table class="gds-table">
          ${this.withHeader
            ? html`
                <thead>
                  ${this.table.getHeaderGroups().map((headerGroup) => {
                    return html`
                      <tr>
                        ${headerGroup.headers.map((header) => {
                          return html`
                    <th class="gds-th" size=${this.headerSize} background=${
                            this.background
                          }>
                      <div class="gds-thead-inner">
                        <button
                          class="gds-column-sort"
                          text-alignment=${this.textAlignment}
                          withSortIcon=${header.column.getIsSorted()}
                          @click=${header.column.getToggleSortingHandler()}
                        >
                          <gds-table-label class"gds-table-label" mode=${
                            this.mode
                          }>
                              ${header.column.columnDef.header}
                          </gds-table-label>
                          ${
                            this.sortable
                              ? {
                                  asc: html`<gds-display-icon
                                    ref="{iconRef}"
                                    foreground-level="900"
                                    icon="arrow-up"
                                    .outlined=${false}
                                  ></gds-display-icon>`,
                                  desc: html`<gds-display-icon
                                    ref="{iconRef}"
                                    foreground-level="900"
                                    icon="arrow-down"
                                    .outlined=${false}
                                  ></gds-display-icon>`,
                                }[header.column.getIsSorted() as string] ?? null
                              : null
                          }
                        </button>
                      </div>
                    </th>
                  `;
                        })}
                      </tr>
                    `;
                  })}
                </thead>
              `
            : null}

          <tbody class="gds-tbody">
            ${this.table.getRowModel().rows.map((row) => {
              return html`
                <tr class="gds-tr">
                  ${row.getVisibleCells().map((cell) => {
                    return html`
                      <td
                        class="gds-td"
                        text-alignment=${this.textAlignment}
                        size=${ifDefined(this.rowSize ? this.rowSize : "tiny")}
                      >
                        ${cell.getValue()}
                      </td>
                    `;
                  })}
                </tr>
              `;
            })}
          </tbody>
        </table>
      </div>`;
  }
}
